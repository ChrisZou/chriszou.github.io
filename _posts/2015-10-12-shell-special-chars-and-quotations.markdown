---
layout: post
title: "Shell命令行中的特殊字符及其转义(去除特殊含义)"
date: 2015-10-12
tags: [tech, linux, shell]
comments: 'duoshuo'
---

## 特殊符号及其转义

我们知道,在一个shell命令是由命令名和它的参数组成的, 比如 `cat testfile`, 其中`cat`是命令名, `testfile`是参数. shell将参数`testfile`传递给`cat`命令. 但是, 如果参数中含有特殊字符, 比如说`*`, `*`我们知道,是表示任意多个(包括0个)任意字符. 那么shell的工作方式是,它会对这些特殊字符进行预先处理, 然后再将处理的结果传给那个命令.
比如说,如果你的当前目录有file, file1, file2 三个文件, 那么当你执行`cat file*`的时候, shell会对参数部分`file*`进行预先处理, 由于`*`表示任意多个(包括0个)任意字符,那么处理的结果便是`file file1 file2`,接下来,shell再将这个结果, 即`file file1 file2`传递给cat命令, 所以你看到的结果跟直接执行`cat file file1 file2`是一样的, 那就是三个文件的内容都显示在命令行终端.  
实际上,我们有办法看到shell处理的结果是什么,或者说真正执行的命令是什么样子的, 那就是在你要执行的命令之前加上`echo`.
比如说,在上面的目录下,你执行`echo cat file*`, 那么你将看到

```
cat file file1, file2
```

上面那条命令,就是经过shell对参数的处理之后,真正执行的命令.  
但是很多时候,我们希望传递给这些命令的,就是这些参数本身, 比如说,你当前目录下有一个文件的文件名就叫`test*`, 同时还有另外一个文件, `test1`. 而你只想看`test*`的内容, 这时候,如果你执行
`cat test*`
的话,那么`test*`和`test1`的内容都会被显示出来,这时候怎么办呢? 这里就涉及到特殊字符的转义(escape)的问题了.所谓的转义,意思就是去掉它的特殊含义.让shell把他们当做一般字符对待,不要进行特殊处理.
在shell中,特殊字符的转义有三种办法

1. 用`\`转义: 把`\`字符放在特殊字符的前面
2. 用单引号('')转义: 用单引号把参数括起来
3.  用双引号("")转义: 用双引号把参数括起来

在上面的例子中,这三种方法都是有效率的,也就是说,下面的三个命令都能达到目的:

1. `cat test\*`
2.  `cat 'test*'`
3.  `cat “test*”`

## 三种转义方法的范围

在shell中,特殊字符是非常多的,而以上提到的三种转义方法的范围也不尽相同,其中第一种方法的范围是最广的,几乎可以对所有的特殊字符进行转义,常见的用法是把`\`放在一个命令行的最后,这样一个很长的命令就可以分为两行或者更多行写. 比如

```
echo this is a \
very long \
line
```

将显示成

```
this is a very long line
```

在这里,其实就是`\`把换行符转义了,让它失去了换行的意思,同时阻止命令立刻执行.  
第二种转义(单引号)的范围比第一种小,它可以阻止命令行立刻执行,但是它不能让换行符失去换行的意思. 所以

```
echo 'hello
world'
```

将显示成

```
hello
world
```

第三种转义(双引号)的范围又比第二种小,单引号可以转义"\`", 而双引号不行. 在shell中, "\`"中间的东西将被视为命令替换. shell对参数进行预先处理时,将把两个"\`"中间的东西当做shell命令进行执行,再将执行结果替换掉他们本身. 举个例子:

```
echo today is `date`
```

将显示

```
today is Mon Oct 12 16:14:16 CST 2015
```

当然,具体的日期跟你执行这条命令的时期有关. 总之,意思你应该明白了. 再回到原来的问题,我们说单引号可以转义"\`", 而双引号不行, 意思就是,单引号之间的"\`"将失去它的特殊含义,而双引号之间的"\`"将依然有特殊含义,所以

```
echo 'today is `date`'
```

将显示

```
today is `date`
```

而

```
echo “today is `date`”
```

将显示

```
today is Mon Oct 12 16:23:23 CST 2015
```

## 常见的一些特殊字符

`*`			任意个任意字符  
`?`			一个任意字符  
`[..]`		`[]`中的任意一个字符,这里也类似于正则表达式,中括号内可以是具体的一些字符,如`[abcd]`也可以是用`-`指定的一个范围,如`[a-d]`  
`#`              注释  
` `(空格)  	参数分隔符  
`cmd`		命令替换  
`|`			管道  
`&`			后台执行  
`;`			命令分隔符(可以在同一行执行两个命令,用`;`分割)  
`~`			用户home目录  

最后记得,**任何时候,你不确定自己是不是转义对了,或者是特殊字符用对了,记得可以在命令前面加上`echo`,来看看真实执行的命令是怎么样的**.  

本文参考文档: http://www.grymoire.com/Unix/Quote.html  

有任何意见或建议，或者发现文中任何问题，欢迎留言！  

更多文章请访问[个人博客](http://chriszou.com/)  
作者：[邹小创](http://chriszou.com/)  
[Github](https://github.com/ChrisZou)  
[微博](http://weibo.com/happystriving)  
邮件：happystriving@126.com
